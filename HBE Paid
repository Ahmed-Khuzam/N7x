 


 
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local CraftRemote = ReplicatedStorage:FindFirstChild("CraftRequest")
if not CraftRemote then
    return
end

local Recipes = {
MachineStar = {
plrRailgun = {
ItemsNeeded = { plrSteel = 10, plrMoney = 3000, plrStone = 30, plrFixBox = 2 },
craftTime = 90,
laborCost = 500,
xpReward = 70,
vipXpReward = 100,
craftPowerNeeded = 10,
},

plrPowerDrink = {
ItemsNeeded = { plrDiamond = 5, plrMoney = 3000, plrGold = 5 },
craftTime = 60,
laborCost = 400,
xpReward = 150,
vipXpReward = 200,
craftPowerNeeded = 10,
},

plrBallMagic = {
ItemsNeeded = { plrDiamond = 2, plrMoney = 1000, plrStone = 5 },
craftTime = 30,
laborCost = 200,
xpReward = 100,
vipXpReward = 150,
craftPowerNeeded = 10,
},
},
 
CraftTable = {
plrBlackOil = {
ItemsNeeded = { plrStone = 1, plrCoal = 2, plrScrap = 1 },
craftTime = 90,
laborCost = 10,
xpReward = 20,
vipXpReward = 50,
craftPowerNeeded = 0,
},

plrFixBox = {
ItemsNeeded = { plrScrap = 10, plrSteel = 3, plrBlackOil = 2 },
craftTime = 10,
laborCost = 20,
xpReward = 15,
vipXpReward = 20,
craftPowerNeeded = 0,
},

plrSteel = {
ItemsNeeded = { plrOldSteel = 2 },
craftTime = 5,
laborCost = 10,
xpReward = 10,
vipXpReward = 15,
craftPowerNeeded = 0,
},
},
}

local ActiveCrafts = {}

local function getStat(player, name)
    local vars = player:FindFirstChild("plrVars")
    local bag = player:FindFirstChild("plrBag")
    if vars and vars:FindFirstChild(name) then
        return vars:FindFirstChild(name)
    elseif bag and bag:FindFirstChild(name) then
        return bag:FindFirstChild(name)
    end
end

local function processCraft(player, workshopName, itemName, amount)
    ActiveCrafts[player] = ActiveCrafts[player] or {}
    local key = workshopName..":"..itemName
    if ActiveCrafts[player][key] then return end
    ActiveCrafts[player][key] = true
    
    local recipeData = Recipes[workshopName] and Recipes[workshopName][itemName]
    if not recipeData then
        ActiveCrafts[player][key] = nil
        return
    end
    
    local ItemsNeeded = recipeData.ItemsNeeded
    local craftTime = recipeData.craftTime or 5
    local laborCost = recipeData.laborCost or 0
    local xpReward = recipeData.xpReward or 0
    local vipXpReward = recipeData.vipXpReward or xpReward
    local craftPowerNeeded = recipeData.craftPowerNeeded or 0
    
    local craftPower = getStat(player, "plrCraftPower")
    if not craftPower or craftPower.Value < craftPowerNeeded then
        ActiveCrafts[player][key] = nil
        return
    end
    
    for i = 1, amount do
        for reqName, cost in pairs(ItemsNeeded) do
            local stat = getStat(player, reqName)
            if not stat or stat.Value < cost then
                ActiveCrafts[player][key] = nil
                return
            end
        end
        
        local character = player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            ActiveCrafts[player][key] = nil
            return
        end
        local startPos = character.HumanoidRootPart.Position
        
        local elapsed = 0
        while elapsed < craftTime do
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                ActiveCrafts[player][key] = nil
                return
            end
            local currentPos = character.HumanoidRootPart.Position
            if (currentPos - startPos).Magnitude > 3 then
                ActiveCrafts[player][key] = nil
                return
            end
            elapsed += 0.1
            task.wait(0.1)
        end
        
        for reqName, cost in pairs(ItemsNeeded) do
            local stat = getStat(player, reqName)
            stat.Value -= cost
        end
        
        local laborStat = getStat(player, "plrLabor")
        if not laborStat or laborStat.Value < laborCost then
            ActiveCrafts[player][key] = nil
            return
        end
        laborStat.Value -= laborCost
        
        local output = getStat(player, itemName)
        if not output then
            ActiveCrafts[player][key] = nil
            return
        end
        output.Value += 1
        
        local xpStat = getStat(player, "plrXp")
        if xpStat then
            local vip = getStat(player, "plrVip")
            if vip and vip.Value == true then
                xpStat.Value += vipXpReward
            else
                xpStat.Value += xpReward
            end
        end
    end
    
    ActiveCrafts[player][key] = nil
end

CraftRemote.OnServerEvent:Connect(function(player, args)
    if type(args) ~= "table" then return end
    local workshopName = args[1]
    local itemName = args[2]
    local amount = args[3]
    if typeof(workshopName) ~= "string" or typeof(itemName) ~= "string" or typeof(amount) ~= "number" then
        return
    end
    processCraft(player, workshopName, itemName, amount)
end)
